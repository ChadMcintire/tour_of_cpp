Q. When should you use a variant as opposed to a union?

Q. How can RAII (Resource Acquisition Is Initialized) be used effectively?

Q. Why would use a noexcept?
    1.One way to ensure termination is to add noexcept to a function so that a 
    throw from anywhere in the function’s implementation will turn into a 
    terminate()

Q. How could I use the notion of invariants to make better class design?

Q. What are some thoughts on error handling best practices?
    1.Don’t believe that all error codes or all exceptions are bad; there are
    clear uses for both. Furthermore, do not believe the myth that exception 
    handling is slow; it is often faster than correct handling of complex or 
    rare error conditions, and of repeated tests of error codes.

Q. When is more appropriate to pass-by-value or pass-by-refernce?
   1.When we care about performance, we usually pass small values 
   by-value and larger ones by-reference. Here “small” means “something 
   that’s really cheap to copy.” Exactly what “small” means depends on 
   machine architecture, but “the size of two or three pointers or less” 
   is a good rule of thumb.
Q. When is it appropriate to return by reference?
   1.We return “by reference” only when we want to grant a caller access 
   to something that is not local to the function. 

Q. When do you use a move constructor?

Q. When should we be weary of auto?
   1.But should be used carefully because a deduced type does not offer 
   a stable interface

Q. When should we be weary of dynamic_cast
   1. Code is cleaner when dynamic_cast is used with restraint. If we can avoid
using type information, we can write simpler and more efficient code, but 
occasionally type information is lost and must be recovered.
   2. Use dynamic_cast where class hierarchy navigation is unavoidable
   3. Use dynamic_cast to a reference type when failure to find the required
      class is considered a failure
   4. Use dynamic_cast to a pointer when failure to find the required class
      is considered a valid alternative



Q. When should you use a unique_ptr or shared_ptr
   Use unique_ptr or shared_ptr to avoid forgetting to delete objects created
   using new;

Q. If a class is an container give it an initializer-list constructor, 
   What is a initializer-list constructor

Q. When should you be explicit about the copy and move operations of a class
   1. When a class has a pointer member, the reason is a pointer may point to
   something that the class needs to delete, in which case the default 
   memberwise copy would be wrong. Alternatively, it might point to something
   that the class must not delete;

Q. What is a good rule of thumb for defining operations.
   1. Either define all of the essential operations or none(using the default
   for all)

Q. When should you use =default and =delete on constructors

Q. What is the difference between implicit and explicit conversion

Q. How should objects be copied?
   1. Concrete type generally memberwise copy is the right semantic, for some
   sophisticated concrete types, such as vector, memberwise copy is not right.
   for abstract types it almost never is.

Q. How do you use namespaces in C++;

Topics to research:
1.Error handling
